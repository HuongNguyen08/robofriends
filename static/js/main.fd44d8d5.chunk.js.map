{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","components/ErrorBoundry.js","reportWebVitals.js","index.js"],"names":["Card","name","email","phone","address","id","className","alt","src","CardList","robots","map","user","i","street","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","Component","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAgBeA,EAdF,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GACzC,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKJ,IACL,4BAAIC,IACJ,4BAAIC,IACJ,4BAAIC,WCeLK,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdJ,KAAMS,EAAOG,GAAGZ,KAChBC,MAAOQ,EAAOG,GAAGX,MACjBC,MAAOO,EAAOG,GAAGV,MACjBC,QAASM,EAAOG,GAAGT,QAAQU,QALtBD,SCKlBE,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACA,8BACI,uBACAX,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCEHI,EATA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YC4CJC,GC/CYC,Y,wDDQvB,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEhB,YAAae,EAAME,OAAOC,SAb1C,EAAKC,MAAO,CACRzB,OAAQ,GACRM,YAAY,IAJN,E,gEAQO,IAAD,OAChBoB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAEtB,OAAQ8B,S,+BAOpC,IAAD,EAC0BC,KAAKN,MAA7BzB,EADF,EACEA,OAAQM,EADV,EACUA,YACV0B,EAAiBhC,EAAOiC,QAAO,SAAAC,GACjC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAAS9B,EAAY6B,kBAGrD,OAAQnC,EAAOqC,OAGb,sBAAKzC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWW,aAAcwB,KAAKX,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUpB,OAAQgC,SANxB,6C,GA1BMb,cEGHmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAKhDX,M","file":"static/js/main.fd44d8d5.chunk.js","sourcesContent":["import Reat from 'react';\r\n\r\nconst Card = ({ name, email, phone, address, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n                <p>{phone}</p>\r\n                <p>{address}</p>\r\n            </div>\r\n        </div>          \r\n    );\r\n}\r\n\r\nexport default Card;","import Reat from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({ robots }) => { \r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) =>{\r\n                    return ( \r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                            phone={robots[i].phone}\r\n                            address={robots[i].address.street}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import Reat from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n    <div>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search robots' \r\n        onChange={searchChange}\r\n        />\r\n    </div>        \r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import Reat from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Scroll;","import Reat, { Component } from 'react';\r\nimport CardList from '../components/CardList.js';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll.js';\r\nimport ErrorBoundry from '../components/ErrorBoundry.js';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor (){\r\n        super()\r\n        this.state ={\r\n            robots: [],\r\n            searchfield:''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response=> response.json())\r\n            .then(users => this.setState({ robots: users}));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n\r\n    render () {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n          })\r\n\r\n            return !robots.length ?\r\n            <h1>Loading</h1> :\r\n            (\r\n              <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                  <CardList robots={filteredRobots} />\r\n                </Scroll>\r\n              </div>\r\n            );\r\n    }\r\n}\r\n    \r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render () {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. That is not good</h1>\r\n        }\r\n        return this.props.children\r\n        }   \r\n}\r\n\r\nexport default ErrorBoundry;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}